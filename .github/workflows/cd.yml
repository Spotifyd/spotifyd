name: Continuous Deployment

on:
  push:
    tags:
    - 'v*.*.*'

jobs:
  publish:
    name: Publishing ${{ matrix.build_target }}-${{ matrix.arch}}-${{ matrix.artifact_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_target: [linux, macos]
        artifact_type: [slim, default, full]
        arch: [x86_64, armv6, armhf, arm64] # "our" name of the arch. How debian, rust and gcc call them will be set later
        # remove unwanted combinations. Arm64 macos is not supported by GH right now
        exclude:
        - build_target: macos
          arch: armv6
        - build_target: macos
          arch: armhf
        - build_target: macos
          arch: arm64
        - build_target: linux
          arch: armv6
          artifact_type: default
        - build_target: linux
          arch: armv6
          artifact_type: full
        include:
        # Setup Arch-specific defaults. Different systems use different names
        - arch: x86_64
          abi: gnu
          binarch: x86_64
          debarch: amd64
        - arch: armv6
          abi: gnueabihf
          binarch: arm
          debarch: armhf
        - arch: armhf
          abi: gnueabihf
          binarch: arm
          debarch: armhf
        - arch: arm64
          abi: gnu
          binarch: aarch64
          debarch: arm64
        # Setup OS-specific defaults
        - build_target: macos
          os: macos-latest
        - build_target: linux
          os: ubuntu-20.04
        ## Setup feature sets
        - artifact_type: slim
          features: ''                       # Slim version has no features enabled by default.
        - artifact_type: 'default'
          features: 'dbus_keyring,dbus_mpris' # Default version has all extra features enabled
        - artifact_type: 'full'
          features: 'dbus_keyring,dbus_mpris' # Full version has all extra features and audio backends enabled
        ## Setup audio backends
        # MacOS
        - build_target: macos
          artifact_type: slim
          audio_backend: portaudio_backend
        - build_target: macos
          artifact_type: default
          audio_backend: portaudio_backend
        - build_target: macos
          artifact_type: full
          audio_backend: portaudio_backend,rodio_backend
        # Linux
        - build_target: linux
          artifact_type: slim
          audio_backend: alsa_backend
        - build_target: linux
          artifact_type: default
          audio_backend: alsa_backend
        - build_target: linux
          artifact_type: full
          audio_backend: pulseaudio_backend,alsa_backend,rodio_backend
    steps:
    - name: Checking out sources
      uses: actions/checkout@v1
    - name: Set vars
      run: |
        .github/scripts/setup-vars.sh ${{ matrix.build_target }} ${{ matrix.arch }} ${{ matrix.binarch }} ${{ matrix.abi }} ${{ matrix.artifact_type }} >> $GITHUB_ENV
    - name: Installing Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: "${{ env.RUST_TARGET }}"
        override: true
    - name: Installing needed macOS dependencies
      if: matrix.build_target == 'macos'
      run: brew install awk dbus pkg-config portaudio
    - name: Installing needed Ubuntu dependencies
      if: matrix.build_target == 'linux'
      run: |
        .github/scripts/install-dependencies.sh ${{ matrix.arch }} ${{ matrix.binarch }} ${{ matrix.abi }} ${{ matrix.debarch }} ${{ matrix.artifact_type }}
    - name: debug
      uses: mxschmitt/action-tmate@v3
#    - name: Running cargo build
#      uses: actions-rs/cargo@v1
#      with:
#        command: build
#        toolchain: ${{ matrix.rust }}
#        args: --locked --release --target ${{ env.RUST_TARGET }} --no-default-features --features "${{ matrix.features }},${{ matrix.audio_backend }}"
#    - name: Packaging final binary
#      shell: bash
#      run: |
#        cd target/${{ env.RUST_TARGET }}/release
#        tar czvf ${{ env.ARTIFACT_NAME}}.tar.gz spotifyd
#        shasum -a 512 ${{ env.ARTIFACT_NAME }}.tar.gz > ${{ env.ARTIFACT_NAME }}.sha512
#    - name: Releasing assets
#      uses: softprops/action-gh-release@v1
#      with:
#        files: |
#          target/${{ env.RUST_TARGET }}/release/${{ env.ARTIFACT_NAME }}.tar.gz
#          target/${{ env.RUST_TARGET }}/release/${{ env.ARTIFACT_NAME }}.sha512
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
